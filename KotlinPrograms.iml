Feature: OTP Resend Functionality

  Scenario: Resend OTP once the timer reaches 00:00
    Given I am on the OTP page
    When I wait for the OTP timer to finish
    Then I should be able to click the Resend OTP butto


import { Given, When, Then } from "@wdio/cucumber-framework";
import OtpPage from "../pageobjects/otp.page";

Given(/^I am on the OTP page$/, async () => {
    await OtpPage.open();
});

When(/^I wait for the OTP timer to finish$/, async () => {
    await OtpPage.waitForTimerAndResendOtp();
});

Then(/^I should be able to click the Resend OTP button$/, async () => {
    const isEnabled = await OtpPage.isResendOtpEnabled();
    expect(isEnabled).toBe(true);
});



import { ChainablePromiseElement } from "webdriverio";
import Page from "./page";

class OtpPage extends Page {
    // Selectors (Update these with actual resource IDs or XPath)
    get timerElement(): ChainablePromiseElement<WebdriverIO.Element> {
        return $("id=your_timer_id"); // Update with actual ID or XPath
    }

    get resendOtpButton(): ChainablePromiseElement<WebdriverIO.Element> {
        return $("id=your_resend_button_id"); // Update with actual ID or XPath
    }

    /**
     * Function to get the current timer text
     */
    async getTimerText(): Promise<string> {
        return (await this.timerElement.getText()).trim();
    }

    /**
     * Function to check if the resend button is enabled
     */
    async isResendOtpEnabled(): Promise<boolean> {
        return await this.resendOtpButton.isEnabled();
    }

    /**
     * Function to wait for the timer to reach 00:00 and then click Resend OTP
     */
    async waitForTimerAndResendOtp(): Promise<void> {
        await browser.waitUntil(async () => {
            const timerText = await this.getTimerText();
            console.log(`Current Timer: ${timerText}`);
            return timerText === "00:00";
        }, {
            timeout: 20000, // Adjust based on your timer duration
            timeoutMsg: "Timer did not reach zero!",
        });

        await browser.waitUntil(async () => {
            const isEnabled = await this.isResendOtpEnabled();
            console.log(`Resend OTP Enabled: ${isEnabled}`);
            return isEnabled;
        }, {
            timeout: 5000, // Give some buffer time
            timeoutMsg: "Resend OTP button did not enable!",
        });

        await this.resendOtpButton.click();
        console.log("Resend OTP button clicked!");
    }

    /**
     * Function to open the OTP page (if needed)
     */
    async open(): Promise<void> {
        await browser.url("your-otp-page-url"); // Update with actual URL if applicable
    }
}

export default new OtpPage();
